from manim import *

class LSTMScene(Scene):
    def construct(self):
        subtitle = Text("Introducing a single neuron")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        neuron = Circle(radius=0.5).set_color(BLUE)
        neuron_label = Text("Neuron").set_position(neuron.get_center() + UP)
        self.play(Create(neuron), Write(neuron_label))
        self.wait(1)
        self.remove(neuron, neuron_label)

        subtitle = Text("Basic neural network structure")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        input_circle = Circle(radius=0.5).set_color(BLUE).set_position(LEFT * 3 + UP * 2)
        hidden_circle = Circle(radius=0.5).set_color(BLUE).set_position(LEFT * 3)
        output_circle = Circle(radius=0.5).set_color(BLUE).set_position(LEFT * 3 + DOWN * 2)
        input_label = Text("Input").set_position(input_circle.get_center() + RIGHT)
        hidden_label = Text("Hidden").set_position(hidden_circle.get_center() + RIGHT)
        output_label = Text("Output").set_position(output_circle.get_center() + RIGHT)
        arrow1 = Arrow(input_circle.get_center(), hidden_circle.get_center())
        arrow2 = Arrow(hidden_circle.get_center(), output_circle.get_center())
        self.play(Create(input_circle), Create(hidden_circle), Create(output_circle), Write(input_label), Write(hidden_label), Write(output_label), Create(arrow1), Create(arrow2))
        self.wait(1)
        self.remove(input_circle, hidden_circle, output_circle, input_label, hidden_label, output_label, arrow1, arrow2)

        subtitle = Text("Expanding the neural network")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        input_circle1 = Circle(radius=0.5).set_color(BLUE).set_position(LEFT * 3 + UP * 2)
        input_circle2 = Circle(radius=0.5).set_color(BLUE).set_position(LEFT * 3 + UP)
        hidden_circle1 = Circle(radius=0.5).set_color(BLUE).set_position(RIGHT * 1 + UP * 2)
        hidden_circle2 = Circle(radius=0.5).set_color(BLUE).set_position(RIGHT * 1)
        hidden_circle3 = Circle(radius=0.5).set_color(BLUE).set_position(RIGHT * 1 + DOWN * 2)
        output_circle = Circle(radius=0.5).set_color(BLUE).set_position(RIGHT * 3 + DOWN)
        input_label1 = Text("Input").set_position(input_circle1.get_center() + RIGHT)
        input_label2 = Text("Input").set_position(input_circle2.get_center() + RIGHT)
        hidden_label1 = Text("Hidden").set_position(hidden_circle1.get_center() + RIGHT)
        hidden_label2 = Text("Hidden").set_position(hidden_circle2.get_center() + RIGHT)
        hidden_label3 = Text("Output").set_position(hidden_circle3.get_center() + RIGHT)
        arrow1 = Arrow(input_circle1.get_center(), hidden_circle1.get_center())
        arrow2 = Arrow(input_circle1.get_center(), hidden_circle2.get_center())
        arrow3 = Arrow(input_circle1.get_center(), hidden_circle3.get_center())
        arrow4 = Arrow(input_circle2.get_center(), hidden_circle1.get_center())
        arrow5 = Arrow(input_circle2.get_center(), hidden_circle2.get_center())
        arrow6 = Arrow(input_circle2.get_center(), hidden_circle3.get_center())
        arrow7 = Arrow(hidden_circle1.get_center(), output_circle.get_center())
        arrow8 = Arrow(hidden_circle2.get_center(), output_circle.get_center())
        arrow9 = Arrow(hidden_circle3.get_center(), output_circle.get_center())
        self.play(Create(input_circle1), Create(input_circle2), Create(hidden_circle1), Create(hidden_circle2), Create(hidden_circle3), Create(output_circle), Write(input_label1), Write(input_label2), Write(hidden_label1), Write(hidden_label2), Write(hidden_label3), Create(arrow1), Create(arrow2), Create(arrow3), Create(arrow4), Create(arrow5), Create(arrow6), Create(arrow7), Create(arrow8), Create(arrow9))
        self.wait(1)
        self.remove(input_circle1, input_circle2, hidden_circle1, hidden_circle2, hidden_circle3, output_circle, input_label1, input_label2, hidden_label1, hidden_label2, hidden_label3, arrow1, arrow2, arrow3, arrow4, arrow5, arrow6, arrow7, arrow8, arrow9)

        subtitle = Text("Inside an LSTM cell")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        lstm_cell = Rectangle(width=4, height=2).set_color(BLUE)
        input_gate = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 1)
        cell_state = Rectangle(width=2, height=2).set_color(BLUE).set_position(RIGHT * 1)
        input_gate_label = Text("Input Gate").set_position(input_gate.get_center() + DOWN)
        cell_state_label = Text("Cell State and Output Gate").set_position(cell_state.get_center() + DOWN)
        arrow1 = Arrow(input_gate.get_center(), cell_state.get_center())
        self.play(Create(lstm_cell), Create(input_gate), Create(cell_state), Write(input_gate_label), Write(cell_state_label), Create(arrow1))
        self.wait(1)
        self.remove(lstm_cell, input_gate, cell_state, input_gate_label, cell_state_label, arrow1)

        subtitle = Text("LSTM cell information flow")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        lstm_cell = Rectangle(width=4, height=2).set_color(BLUE)
        input_gate = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 1)
        cell_state = Rectangle(width=2, height=2).set_color(BLUE).set_position(RIGHT * 1)
        input_gate_label = Text("Input Gate").set_position(input_gate.get_center() + DOWN)
        cell_state_label = Text("Cell State and Output Gate").set_position(cell_state.get_center() + DOWN)
        sigmoid_graph = FunctionGraph(lambda x: 1 / (1 + np.exp(-x)), x_range=[-5, 5], color=BLUE).set_position(input_gate.get_center() + UP)
        cell_state_circle = Circle(radius=0.5).set_color(BLUE).set_position(cell_state.get_center() + UP)
        cell_state_circle_label = Text("Cell State").set_position(cell_state_circle.get_center() + RIGHT)
        output_circle = Circle(radius=0.5).set_color(BLUE).set_position(cell_state.get_center() + DOWN)
        output_circle_label = Text("Output").set_position(output_circle.get_center() + RIGHT)
        sigmoid_graph2 = FunctionGraph(lambda x: 1 / (1 + np.exp(-x)), x_range=[-5, 5], color=BLUE).set_position(cell_state.get_center() + DOWN * 2)
        arrow1 = Arrow(input_gate.get_center(), cell_state.get_center())
        arrow2 = Arrow(cell_state.get_center(), output_circle.get_center())
        self.play(Create(lstm_cell), Create(input_gate), Create(cell_state), Write(input_gate_label), Write(cell_state_label), Create(sigmoid_graph), Create(cell_state_circle), Write(cell_state_circle_label), Create(output_circle), Write(output_circle_label), Create(sigmoid_graph2), Create(arrow1), Create(arrow2))
        self.wait(1)
        self.remove(lstm_cell, input_gate, cell_state, input_gate_label, cell_state_label, sigmoid_graph, cell_state_circle, cell_state_circle_label, output_circle, output_circle_label, sigmoid_graph2, arrow1, arrow2)

        subtitle = Text("Unfolding the LSTM network")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        lstm_cell1 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 3)
        lstm_cell2 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 1)
        lstm_cell3 = Rectangle(width=2, height=2).set_color(BLUE).set_position(RIGHT * 1)
        arrow1 = Arrow(lstm_cell1.get_center(), lstm_cell2.get_center())
        arrow2 = Arrow(lstm_cell2.get_center(), lstm_cell3.get_center())
        self.play(Create(lstm_cell1), Create(lstm_cell2), Create(lstm_cell3), Create(arrow1), Create(arrow2))
        self.wait(1)
        self.remove(lstm_cell1, lstm_cell2, lstm_cell3, arrow1, arrow2)

        subtitle = Text("How LSTM cells process sequences")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        lstm_cell1 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 3)
        lstm_cell2 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 1)
        lstm_cell3 = Rectangle(width=2, height=2).set_color(BLUE).set_position(RIGHT * 1)
        lstm_cell2.set_stroke(color=YELLOW, width=5)
        arrow1 = Arrow(lstm_cell1.get_center(), lstm_cell2.get_center())
        arrow2 = Arrow(lstm_cell2.get_center(), lstm_cell3.get_center())
        arrow3 = Arrow(lstm_cell2.get_center() + UP, lstm_cell2.get_center() + DOWN)
        self.play(Create(lstm_cell1), Create(lstm_cell2), Create(lstm_cell3), Create(arrow1), Create(arrow2), Create(arrow3))
        self.wait(1)
        self.remove(lstm_cell1, lstm_cell2, lstm_cell3, arrow1, arrow2, arrow3)

        subtitle = Text("LSTM sequence processing over time")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)

        lstm_cell1 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 3)
        lstm_cell2 = Rectangle(width=2, height=2).set_color(BLUE).set_position(LEFT * 1)
        lstm_cell3 = Rectangle(width=2, height=2).set_color(BLUE).set_position(RIGHT * 1)
        time_step1 = Text("t=1").set_position(lstm_cell1.get_center() + UP)
        time_step2 = Text("t=2").set_position(lstm_cell2.get_center() + UP)
        time_step3 = Text("t=3").set_position(lstm_cell3.get_center() + UP)
        arrow1 = Arrow(lstm_cell1.get_center(), lstm_cell2.get_center())
        arrow2 = Arrow(lstm_cell2.get_center(), lstm_cell3.get_center())
        self.play(Create(lstm_cell1), Create(lstm_cell2), Create(lstm_cell3), Write(time_step1), Write(time_step2), Write(time_step3), Create(arrow1), Create(arrow2))
        self.wait(1)
        self.remove(lstm_cell1, lstm_cell2, lstm_cell3, time_step1, time_step2, time_step3, arrow1, arrow2)