from manim import *
import numpy as np

class LSTMScene(Scene):
    def construct(self):
        subtitle = Text("Introducing a single neuron")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        neuron = Circle(radius=0.5).shift(DOWN)
        label = Text("Neuron").shift(UP)
        self.play(Create(neuron), Write(label))
        self.wait(1)
        self.remove(neuron, label)
        
        subtitle = Text("Basic neural network structure")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        input_circle = Circle(radius=0.5).shift(LEFT + UP)
        hidden_circle = Circle(radius=0.5).shift(LEFT)
        output_circle = Circle(radius=0.5).shift(LEFT + DOWN)
        input_label = Text("Input").shift(LEFT + UP * 1.5)
        hidden_label = Text("Hidden").shift(LEFT + UP * 0.5)
        output_label = Text("Output").shift(LEFT + DOWN * 0.5)
        arrow1 = Arrow(input_circle.get_bottom(), hidden_circle.get_top())
        arrow2 = Arrow(hidden_circle.get_bottom(), output_circle.get_top())
        self.play(Create(input_circle), Create(hidden_circle), Create(output_circle), Write(input_label), Write(hidden_label), Write(output_label), Create(arrow1), Create(arrow2))
        self.wait(1)
        self.remove(input_circle, hidden_circle, output_circle, input_label, hidden_label, output_label, arrow1, arrow2)
        
        subtitle = Text("Neural network with layers")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        input_circle1 = Circle(radius=0.5).shift(LEFT + UP * 2)
        input_circle2 = Circle(radius=0.5).shift(LEFT + UP)
        input_circle3 = Circle(radius=0.5).shift(LEFT)
        hidden_circle = Circle(radius=0.5).shift(RIGHT)
        output_circle = Circle(radius=0.5).shift(RIGHT + DOWN)
        input_label1 = Text("Input").shift(LEFT + UP * 2.5)
        input_label2 = Text("Input").shift(LEFT + UP * 1.5)
        input_label3 = Text("Input").shift(LEFT + UP * 0.5)
        hidden_label = Text("Hidden").shift(RIGHT + UP * 0.5)
        output_label = Text("Output").shift(RIGHT + DOWN * 0.5)
        arrow1 = Arrow(input_circle1.get_right(), hidden_circle.get_left())
        arrow2 = Arrow(input_circle2.get_right(), hidden_circle.get_left())
        arrow3 = Arrow(input_circle3.get_right(), hidden_circle.get_left())
        arrow4 = Arrow(hidden_circle.get_bottom(), output_circle.get_top())
        self.play(Create(input_circle1), Create(input_circle2), Create(input_circle3), Create(hidden_circle), Create(output_circle), Write(input_label1), Write(input_label2), Write(input_label3), Write(hidden_label), Write(output_label), Create(arrow1), Create(arrow2), Create(arrow3), Create(arrow4))
        self.wait(1)
        self.remove(input_circle1, input_circle2, input_circle3, hidden_circle, output_circle, input_label1, input_label2, input_label3, hidden_label, output_label, arrow1, arrow2, arrow3, arrow4)
        
        subtitle = Text("Inside an LSTM cell")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        lstm_cell = Rectangle(width=4, height=2)
        vertical_line = Line(lstm_cell.get_top(), lstm_cell.get_bottom()).shift(LEFT)
        cell_state_label = Text("Cell State").shift(LEFT * 2)
        gates_label = Text("Gates").shift(RIGHT * 2)
        input_gate = Rectangle(width=1, height=0.5).shift(RIGHT + UP * 0.5)
        output_gate = Rectangle(width=1, height=0.5).shift(RIGHT + DOWN * 0.5)
        forget_gate = Rectangle(width=1, height=0.5).shift(RIGHT)
        input_gate_label = Text("Input Gate").shift(RIGHT + UP * 1)
        output_gate_label = Text("Output Gate").shift(RIGHT + DOWN * 1)
        forget_gate_label = Text("Forget Gate").shift(RIGHT + UP * 0.2)
        self.play(Create(lstm_cell), Create(vertical_line), Write(cell_state_label), Write(gates_label), Create(input_gate), Create(output_gate), Create(forget_gate), Write(input_gate_label), Write(output_gate_label), Write(forget_gate_label))
        self.wait(1)
        self.remove(lstm_cell, vertical_line, cell_state_label, gates_label, input_gate, output_gate, forget_gate, input_gate_label, output_gate_label, forget_gate_label)
        
        subtitle = Text("LSTM cell data flow")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        lstm_cell = Rectangle(width=4, height=2)
        vertical_line = Line(lstm_cell.get_top(), lstm_cell.get_bottom()).shift(LEFT)
        cell_state_label = Text("Cell State").shift(LEFT * 2)
        gates_label = Text("Gates").shift(RIGHT * 2)
        input_gate = Rectangle(width=1, height=0.5).shift(RIGHT + UP * 0.5)
        output_gate = Rectangle(width=1, height=0.5).shift(RIGHT + DOWN * 0.5)
        forget_gate = Rectangle(width=1, height=0.5).shift(RIGHT)
        input_gate_label = Text("Input Gate").shift(RIGHT + UP * 1)
        output_gate_label = Text("Output Gate").shift(RIGHT + DOWN * 1)
        forget_gate_label = Text("Forget Gate").shift(RIGHT + UP * 0.2)
        hidden_state = Circle(radius=0.5).shift(LEFT * 3)
        hidden_state_label = Text("Hidden State").shift(LEFT * 3.5)
        arrow1 = Arrow(input_gate.get_left(), lstm_cell.get_left())
        arrow2 = Arrow(lstm_cell.get_left(), output_gate.get_left())
        arrow3 = Arrow(forget_gate.get_left(), lstm_cell.get_left())
        arrow4 = Arrow(hidden_state.get_right(), lstm_cell.get_left())
        self.play(Create(lstm_cell), Create(vertical_line), Write(cell_state_label), Write(gates_label), Create(input_gate), Create(output_gate), Create(forget_gate), Write(input_gate_label), Write(output_gate_label), Write(forget_gate_label), Create(hidden_state), Write(hidden_state_label), Create(arrow1), Create(arrow2), Create(arrow3), Create(arrow4))
        self.wait(1)
        self.remove(lstm_cell, vertical_line, cell_state_label, gates_label, input_gate, output_gate, forget_gate, input_gate_label, output_gate_label, forget_gate_label, hidden_state, hidden_state_label, arrow1, arrow2, arrow3, arrow4)
        
        subtitle = Text("LSTM cell context")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        lstm_cell = Rectangle(width=4, height=2)
        vertical_line = Line(lstm_cell.get_top(), lstm_cell.get_bottom()).shift(LEFT)
        cell_state_label = Text("Cell State").shift(LEFT * 2)
        gates_label = Text("Gates").shift(RIGHT * 2)
        input_gate = Rectangle(width=1, height=0.5).shift(RIGHT + UP * 0.5)
        output_gate = Rectangle(width=1, height=0.5).shift(RIGHT + DOWN * 0.5)
        forget_gate = Rectangle(width=1, height=0.5).shift(RIGHT)
        input_gate_label = Text("Input Gate").shift(RIGHT + UP * 1)
        output_gate_label = Text("Output Gate").shift(RIGHT + DOWN * 1)
        forget_gate_label = Text("Forget Gate").shift(RIGHT + UP * 0.2)
        hidden_state = Circle(radius=0.5).shift(LEFT * 3)
        hidden_state_label = Text("Hidden State").shift(LEFT * 3.5)
        arrow1 = Arrow(input_gate.get_left(), lstm_cell.get_left())
        arrow2 = Arrow(lstm_cell.get_left(), output_gate.get_left())
        arrow3 = Arrow(forget_gate.get_left(), lstm_cell.get_left())
        arrow4 = Arrow(hidden_state.get_right(), lstm_cell.get_left())
        new_input_label = Text("New Input").shift(RIGHT + UP * 1.5)
        previous_hidden_state_label = Text("Previous Hidden State").shift(LEFT * 4)
        self.play(Create(lstm_cell), Create(vertical_line), Write(cell_state_label), Write(gates_label), Create(input_gate), Create(output_gate), Create(forget_gate), Write(input_gate_label), Write(output_gate_label), Write(forget_gate_label), Create(hidden_state), Write(hidden_state_label), Create(arrow1), Create(arrow2), Create(arrow3), Create(arrow4), Write(new_input_label), Write(previous_hidden_state_label))
        self.wait(1)
        self.remove(lstm_cell, vertical_line, cell_state_label, gates_label, input_gate, output_gate, forget_gate, input_gate_label, output_gate_label, forget_gate_label, hidden_state, hidden_state_label, arrow1, arrow2, arrow3, arrow4, new_input_label, previous_hidden_state_label)
        
        subtitle = Text("LSTM network unrolled")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        lstm_cell1 = Rectangle(width=4, height=2).shift(LEFT * 4)
        vertical_line1 = Line(lstm_cell1.get_top(), lstm_cell1.get_bottom()).shift(LEFT * 5)
        cell_state_label1 = Text("Cell State").shift(LEFT * 6)
        gates_label1 = Text("Gates").shift(LEFT * 2)
        input_gate1 = Rectangle(width=1, height=0.5).shift(LEFT * 3.5 + UP * 0.5)
        output_gate1 = Rectangle(width=1, height=0.5).shift(LEFT * 3.5 + DOWN * 0.5)
        forget_gate1 = Rectangle(width=1, height=0.5).shift(LEFT * 3.5)
        input_gate_label1 = Text("Input Gate").shift(LEFT * 3 + UP * 1)
        output_gate_label1 = Text("Output Gate").shift(LEFT * 3 + DOWN * 1)
        forget_gate_label1 = Text("Forget Gate").shift(LEFT * 3 + UP * 0.2)
        hidden_state1 = Circle(radius=0.5).shift(LEFT * 7)
        hidden_state_label1 = Text("Hidden State").shift(LEFT * 7.5)
        arrow11 = Arrow(input_gate1.get_left(), lstm_cell1.get_left())
        arrow21 = Arrow(lstm_cell1.get_left(), output_gate1.get_left())
        arrow31 = Arrow(forget_gate1.get_left(), lstm_cell1.get_left())
        arrow41 = Arrow(hidden_state1.get_right(), lstm_cell1.get_left())
        new_input_label1 = Text("New Input").shift(LEFT * 2.5 + UP * 1.5)
        previous_hidden_state_label1 = Text("Previous Hidden State").shift(LEFT * 8)
        
        lstm_cell2 = Rectangle(width=4, height=2)
        vertical_line2 = Line(lstm_cell2.get_top(), lstm_cell2.get_bottom()).shift(LEFT)
        cell_state_label2 = Text("Cell State").shift(LEFT * 2)
        gates_label2 = Text("Gates").shift(RIGHT * 2)
        input_gate2 = Rectangle(width=1, height=0.5).shift(RIGHT + UP * 0.5)
        output_gate2 = Rectangle(width=1, height=0.5).shift(RIGHT + DOWN * 0.5)
        forget_gate2 = Rectangle(width=1, height=0.5).shift(RIGHT)
        input_gate_label2 = Text("Input Gate").shift(RIGHT + UP * 1)
        output_gate_label2 = Text("Output Gate").shift(RIGHT + DOWN * 1)
        forget_gate_label2 = Text("Forget Gate").shift(RIGHT + UP * 0.2)
        hidden_state2 = Circle(radius=0.5).shift(RIGHT * 3)
        hidden_state_label2 = Text("Hidden State").shift(RIGHT * 3.5)
        arrow12 = Arrow(input_gate2.get_left(), lstm_cell2.get_left())
        arrow22 = Arrow(lstm_cell2.get_left(), output_gate2.get_left())
        arrow32 = Arrow(forget_gate2.get_left(), lstm_cell2.get_left())
        arrow42 = Arrow(hidden_state2.get_right(), lstm_cell2.get_left())
        new_input_label2 = Text("New Input").shift(RIGHT + UP * 1.5)
        previous_hidden_state_label2 = Text("Previous Hidden State").shift(RIGHT * 4)
        
        arrow5 = Arrow(hidden_state1.get_right(), hidden_state2.get_left())
        
        self.play(Create(lstm_cell1), Create(vertical_line1), Write(cell_state_label1), Write(gates_label1), Create(input_gate1), Create(output_gate1), Create(forget_gate1), Write(input_gate_label1), Write(output_gate_label1), Write(forget_gate_label1), Create(hidden_state1), Write(hidden_state_label1), Create(arrow11), Create(arrow21), Create(arrow31), Create(arrow41), Write(new_input_label1), Write(previous_hidden_state_label1), Create(lstm_cell2), Create(vertical_line2), Write(cell_state_label2), Write(gates_label2), Create(input_gate2), Create(output_gate2), Create(forget_gate2), Write(input_gate_label2), Write(output_gate_label2), Write(forget_gate_label2), Create(hidden_state2), Write(hidden_state_label2), Create(arrow12), Create(arrow22), Create(arrow32), Create(arrow42), Write(new_input_label2), Write(previous_hidden_state_label2), Create(arrow5))
        self.wait(1)
        self.remove(lstm_cell1, vertical_line1, cell_state_label1, gates_label1, input_gate1, output_gate1, forget_gate1, input_gate_label1, output_gate_label1, forget_gate_label1, hidden_state1, hidden_state_label1, arrow11, arrow21, arrow31, arrow41, new_input_label1, previous_hidden_state_label1, lstm_cell2, vertical_line2, cell_state_label2, gates_label2, input_gate2, output_gate2, forget_gate2, input_gate_label2, output_gate_label2, forget_gate_label2, hidden_state2, hidden_state_label2, arrow12, arrow22, arrow32, arrow42, new_input_label2, previous_hidden_state_label2, arrow5)
        
        subtitle = Text("LSTM output generation")
        self.add(subtitle)
        self.wait(1)
        self.remove(subtitle)
        
        lstm_cell = Rectangle(width=4, height=2)
        vertical_line = Line(lstm_cell.get_top(), lstm_cell.get_bottom()).shift(LEFT)
        cell_state_label = Text("Cell State").shift(LEFT * 2)
        gates_label = Text("Gates").shift(RIGHT * 2)
        input_gate = Rectangle(width=1, height=0.5).shift(RIGHT + UP * 0.5)
        output_gate = Rectangle(width=1, height=0.5).shift(RIGHT + DOWN * 0.5)
        forget_gate = Rectangle(width=1, height=0.5).shift(RIGHT)
        input_gate_label = Text("Input Gate").shift(RIGHT + UP * 1)
        output_gate_label = Text("Output Gate").shift(RIGHT + DOWN * 1)
        forget_gate_label = Text("Forget Gate").shift(RIGHT + UP * 0.2)
        hidden_state = Circle(radius=0.5).shift(LEFT * 3)
        hidden_state_label = Text("Hidden State").shift(LEFT * 3.5)
        arrow1 = Arrow(input_gate.get_left(), lstm_cell.get_left())
        arrow2 = Arrow(lstm_cell.get_left(), output_gate.get_left())
        arrow3 = Arrow(forget_gate.get_left(), lstm_cell.get_left())
        arrow4 = Arrow(hidden_state.get_right(), lstm_cell.get_left())
        new_input_label = Text("New Input").shift(RIGHT + UP * 1.5)
        previous_hidden_state_label = Text("Previous Hidden State").shift(LEFT * 4)
        output_label = Text("Output").shift(RIGHT * 4)
        arrow5 = Arrow(lstm_cell.get_right(), output_label.get_left())
        
        self.play(Create(lstm_cell), Create(vertical_line), Write(cell_state_label), Write(gates_label), Create(input_gate), Create(output_gate), Create(forget_gate), Write(input_gate_label), Write(output_gate_label), Write(forget_gate_label), Create(hidden_state), Write(hidden_state_label), Create(arrow1), Create(arrow2), Create(arrow3), Create(arrow4), Write(new_input_label), Write(previous_hidden_state_label), Write(output_label), Create(arrow5))
        self.wait(1)
        self.remove(lstm_cell, vertical_line, cell_state_label, gates_label, input_gate, output_gate, forget_gate, input_gate_label, output_gate_label, forget_gate_label, hidden_state, hidden_state_label, arrow1, arrow2, arrow3, arrow4, new_input_label, previous_hidden_state_label, output_label, arrow5)